■情報の共有
●そもそもこういう情報の共有をgitでやるのはどうなのか（必ずしもダメでもないかもとか思って、今回は試験的にやってみました）
●グダグダ書きすぎたので、さらっと読んでもらって細かい所は改めて電話とかで話しましょう
●せめてMarkdownとかで書けばマシだったかも・・・（詳しく知らないので）

■node.js関連
●シングルスレッドであることの心配
・AWSのインスタンスは種類によって仮想コアの数が色々で、仮想コア1のインスタンスもあるのは分かった
・インスタンスを作るオーバーヘッドは気になる（スリープしてるインスタンスがすぐ起きる感じ？それとももしかして普通にOSを起動するくらいの時間がかかる？）
・冗長性（多分「何かエラーですごく重くなったときに、インスタンスを自動的に作ってくれる」んだろう、という感じ。「そっちが引き受けてくれるから止まる心配は要らない！」のかは不明）

●node.jsでRESTful APIを作る方法
・参考：express4でRESTful API作る(http://yutapon.hatenablog.com/entry/2014/04/29/124657)
・express-resourceというライブラリはあるが古い
・古いのでexpress3では動くがexpress4では動かない
・「自前で作ったほうが早そう」との記述あり

■コーディングを進めるにあたって
●環境
・別に統一する必要もないかも知れませんが
・Atomを使っているそうですが、おススメですか？どうですか？
・IDEとしてEclipseを使ってみたことはありますが、巷で言われてるような「一度使ったらテキストエディタには戻れない！」という程の魅力は感じませんでした
・ただリファクタリングが苦手なので、もっとIDEを使いこなして苦手意識をなくさないといけないのかも、とか思ったりはしてます

●命名規則とかについて自分の傾向
・最近は結構長ったらしい名前を付ける傾向があります
・ある程度（プログラマの世界で）一般的な略語は使いますが、独自の略語は使わないようにしてます
・と言いつつたまに気まぐれに変な略語を使うことがある（そういうのは今回は全力で自制します）
・ローマ字の日本語の名前は好きじゃないです
・ですが、その辺は人に合わせます（と言う訳で好みを教えてください）

●コーディング規約について
・javascriptはprivateプロパティがないので例えば「頭に_(アンダーバー)を付けたらprivateプロパティのつもり」みたいなのが必要かも
・昔は「頭に$を付けたらグローバル変数」という変なルールがあった時代もありますが、そういう古臭いコーディングはしない方向で
・ここはキャメルケースで、いやいやスネークケースで、みたいなのは詳しく知らないのでお任せします（ちゃんと決めないと適当にやってしまいます）
・大きなまとまりをアンダーバーで区切ってさらに大文字と小文字の区別で細かく区切る、みたいなルールでやってみたこともありますが、そういう一般的じゃないことは止めておいた方が良いでしょう
・と言う訳で自分だけでやるとグダグダになりそうなので力を貸してください！

●今作っているもの
・とりあえず命名規則も何も深く考えず「こんなクラスがほぼ間違いなく要るだろう」というリストをコードっぽく書いてみました
・実際に使えることは全く意識してない適当なコードです
・公開リポジトリに上げて良い物かどうか迷ったのでとりあえずマイPCにだけ保存してます
・こんな感じ↓

Consumers // 一般ユーザー
{
	name
	password
}

Groceries // 一般ユーザーに売る日用品（GoodsとかCommoditiesの方が良い？）
{
・・・